# Timer Callback Implementation Test

## What We've Implemented

1. **Callback-based timer support** in `TimedInput`:
   - `read_line_with_timer` now accepts an optional callback function
   - When timeout expires, the callback is invoked
   - Callback returns `bool`: true = terminate input, false = continue
   - If callback returns false, timer is reset for periodic interrupts

2. **Interpreter integration**:
   - Creates a callback closure that captures the interpreter instance
   - Calls `call_timer_routine()` when timer expires
   - For turn-based games, still simulates timer after input if not interrupted
   - For real-time games, timer can interrupt during input

3. **Clean architecture**:
   - No circular dependencies
   - TimedInput remains independent of Interpreter
   - Callback pattern allows flexible timer handling

## Testing

Run the test program to see real-time timer interrupts:
```bash
RUST_LOG=info cargo run --bin test_timed_input
```

Test scenarios:
1. Type within 5 seconds - timer may fire but won't terminate
2. Wait 1 second in test 3 - timer will terminate input
3. See partial input returned when terminated

## Next Steps

- Test with actual Z-Machine games that use timers
- Implement read_char with timer support for V4+ games
- Add periodic timer support (currently resets after each fire)