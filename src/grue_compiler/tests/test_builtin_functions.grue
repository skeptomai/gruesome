// Comprehensive test for all built-in functions
fn test_string_functions() {
    print("=== Testing String Functions ===");
    
    // String utilities
    let text = "Hello World";
    let index = indexOf(text, "World");
    print("indexOf result: " + to_string(index));
    
    let sliced = slice(text, 6);
    print("slice result: " + sliced);
    
    let sub = substring(text, 0, 5);
    print("substring result: " + sub);
    
    let lower = toLowerCase(text);
    print("toLowerCase result: " + lower);
    
    let upper = toUpperCase(text);
    print("toUpperCase result: " + upper);
    
    let trimmed = trim("  spaced  ");
    print("trim result: '" + trimmed + "'");
    
    let char = charAt(text, 1);
    print("charAt result: " + char);
    
    let parts = split(text, " ");
    print("split result length: " + to_string(parts.length));
    
    let replaced = replace(text, "World", "Universe");
    print("replace result: " + replaced);
    
    let starts = startsWith(text, "Hello");
    let ends = endsWith(text, "World");
    print("startsWith/endsWith: " + to_string(starts) + "/" + to_string(ends));
}

fn test_math_functions() {
    print("=== Testing Math Functions ===");
    
    // Math utilities
    let negative = -42;
    let absolute = abs(negative);
    print("abs result: " + to_string(absolute));
    
    let minimum = min(10, 5);
    let maximum = max(10, 5);
    print("min/max results: " + to_string(minimum) + "/" + to_string(maximum));
    
    let value = 37; // Simulating 3.7 * 10
    let rounded = round(value);
    let floored = floor(value);
    let ceiled = ceil(value);
    print("round/floor/ceil: " + to_string(rounded) + "/" + to_string(floored) + "/" + to_string(ceiled));
}

fn test_array_functions() {
    print("=== Testing Array Functions ===");
    
    // Basic array operations (already tested before)
    let numbers = [1, 2, 3, 4, 5];
    numbers.add(6);
    print("Array after add: length = " + to_string(numbers.length));
    
    // Advanced array operations (placeholder - would need actual function references)
    // For now, test basic operations that don't require function parameters
    print("Advanced array methods available but need function references");
    print("Testing only basic array operations for now");
    
    let position = numbers.indexOf(3);
    print("indexOf 3: " + to_string(position));
    
    let joined = numbers.join(", ");
    print("Joined array: " + joined);
    
    let reversed = numbers.reverse();
    print("Reversed array length: " + to_string(reversed.length));
    
    let sorted = numbers.sort();
    print("Sorted array length: " + to_string(sorted.length));
}

fn test_type_functions() {
    print("=== Testing Type Functions ===");
    
    let text = "hello";
    let number = 42;
    let flag = true;
    let items = [1, 2, 3];
    
    // Type checking functions
    print("is_string(text): " + to_string(is_string(text)));
    print("is_int(number): " + to_string(is_int(number)));
    print("is_bool(flag): " + to_string(is_bool(flag)));
    print("is_array(items): " + to_string(is_array(items)));
    
    // Cross-type checks (should be false)
    print("is_string(number): " + to_string(is_string(number)));
    print("is_int(text): " + to_string(is_int(text)));
    
    // TypeOf function
    print("typeof(text): " + typeof(text));
    print("typeof(number): " + typeof(number));
    print("typeof(flag): " + typeof(flag));
    print("typeof(items): " + typeof(items));
}

fn main() {
    print("Built-in Functions Comprehensive Test");
    print("====================================");
    
    test_string_functions();
    test_math_functions();
    test_array_functions();
    test_type_functions();
    
    print("====================================");
    print("Built-in Functions Test Complete");
}